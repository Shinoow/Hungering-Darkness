buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            // Required for the curseforge task
            name = "gradle"
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.0"
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'

repositories {
	maven {
		name 'Darkhax'
		url "https://maven.mcmoddev.com/"
	}
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
	}
}

ext.propFile = file "build.properties"

propFile.withReader {
	
	def prop = new Properties()
	prop.load(it)
	project.ext.props = new ConfigSlurper().parse prop
}

version = props.hd_version
group = "com.shinoow.hungeringdarkness" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Hungering Darkness"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    
    mappings = "stable_nodoc_39"
    makeObfSourceJar = false

    replaceIn "HungeringDarkness.java"
        replace "forgeversion", props.forge_version
		replace "hd_version", props.hd_version
		replace "cert_fingerprint", project.findProperty('signSHA1')
}

dependencies {
	deobfCompile "net.darkhax.bookshelf:Bookshelf-1.12.2:2.3.556"
    deobfCompile "net.darkhax.gamestages:GameStages-1.12.2:2.0.98"
    deobfCompile "darknesslib:DarknessLib:1.12.2:1.1.0";
}

version = "${props.mc_version}-${props.hd_version}"

processResources {
	// I really don't want that file to exist anywhere
	exclude '**/Thumbs.db'

    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
		include 'version.properties'

        // replace version and mcversion
        expand ([
			'version':project.version,
			'hdversion':project.props.hd_version,
			'mcversion':project.props.mc_version,
			'forgeversion':project.props.forge_version
		])
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'version.properties'
    }
}

task srcJar(type: Jar) {
    from sourceSets.main.allJava
	
	extension = 'jar'
	classifier = 'sources'
}

artifacts {
    archives srcJar
}

curseforge {
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : '' // gradle curse -Pcurseforge_key=your-api-key
	project{
		id = "302941" // http://minecraft.curseforge.com/mc-mods/"xxxxxx"-projectname
		releaseType = project.props.release_type //alpha beta release
		changelogType = 'html'
		changelog = new File('changelog.html') //must have at least an empty string
		addArtifact srcJar
        relations {
			optionalDependency 'game-stages'
            requiredDependency 'darknesslib'
		}
	}
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran. 
build.dependsOn signJar

//copies the source files over to the folder from which they will be included in a RAR-file
task prepareFiles(type: Copy){
    from "$rootDir"
        include "build.gradle"
        include "build.properties"
        include "changelog.html"
        include "gradle.properties"
        include "src/main/**"
    into "$buildDir/rarTemp"

    String filePath = "${project.findProperty("sourceDirHD")}/HD source ${props.hd_version} (${props.mc_version}).rar"
    String filePath1 = "${buildDir}/rarTemp/*"

    new File(projectDir, "generateRAR.bat").text = project.findProperty("rarCommand")+' "'+filePath+'" "'+filePath1+'"';
}

//copies the src jar to the place where binaries are stored
task copySrcJar(type: Copy){
    from srcJar
    into "${project.findProperty("binariesDir")}/${archivesBaseName}/jars"
}

//copies the main jar to the place where binaries are stored
task copyJar(type: Copy){
    from jar
    into "${project.findProperty("binariesDir")}/${archivesBaseName}/jars"
}

//generates a jar file with the source code and gradle files, then places it in a good place
task generateRar(type: Exec){
    
    commandLine 'cmd', "/c", "generateRAR.bat";
    ignoreExitValue = true
}

//runs all of the tasks for building and deploying
task buildAndDeploy(){
    dependsOn 'clean'
    dependsOn 'build'
    dependsOn 'curseforge'
    dependsOn 'copySrcJar'
    dependsOn 'copyJar'
    dependsOn 'prepareFiles'
    dependsOn 'generateRar'
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('curseforge').mustRunAfter 'build'
    tasks.findByName('prepareFiles').mustRunAfter 'build'
    tasks.findByName('generateRar').mustRunAfter 'prepareFiles'
    tasks.findByName('copySrcJar').mustRunAfter 'prepareFiles'
    tasks.findByName('copyJar').mustRunAfter 'prepareFiles'
}

//final cleanup
buildAndDeploy.doLast {
    delete "${buildDir}/rarTemp/"
    delete "generateRAR.bat"
}
